<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <title>FareGuard ‚Äì Patrol & Hotspots</title>
  <meta name="theme-color" content="#7e8ce0">
  <style>
    :root{
      --bg:#0f1222;
      --bg-soft:#171a2e;
      --card:#1e2240;
      --text:#eef0ff;
      --muted:#b9bdf6;
      --accent:#7e8ce0;
      --accent-2:#ffb4d3;
      --good:#7be0a6;
      --warn:#ffd36e;
      --danger:#ff7b8a;
      --shadow:0 10px 30px rgba(0,0,0,.35);
      --radius:18px;
      --pad:14px;
    }
    /* Light theme */
    :root[data-theme="light"]{
      --bg:#f6f7ff;
      --bg-soft:#ffffff;
      --card:#ffffff;
      --text:#141638;
      --muted:#3b3f6b;
      --accent:#5c6de8;
      --accent-2:#ff8fc1;
      --good:#1ea76b;
      --warn:#b26b00;
      --danger:#c9394e;
      --shadow:0 10px 30px rgba(0,0,0,.12);
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,"Noto Sans",sans-serif;background:var(--bg);color:var(--text);overflow:hidden}
    body.large{font-size:18px}

    .topbar{position:fixed;inset:0 0 auto 0;height:62px;padding:0 10px;display:flex;align-items:center;gap:10px;background:linear-gradient(180deg,rgba(15,18,34,.95),rgba(15,18,34,.6) 60%,transparent);backdrop-filter:blur(10px);z-index:30}
    :root[data-theme="light"] .topbar{background:linear-gradient(180deg,rgba(246,247,255,.95),rgba(246,247,255,.7) 60%,transparent)}
    .brand{display:flex;gap:10px;align-items:center;font-weight:800;letter-spacing:.3px}
    .brand .logo{width:36px;height:36px;border-radius:12px;display:grid;place-items:center;background:linear-gradient(135deg,var(--accent),var(--accent-2));box-shadow:var(--shadow)}
    .brand b{background:linear-gradient(135deg,var(--accent),var(--accent-2));-webkit-background-clip:text;background-clip:text;color:transparent}
    .top-actions{margin-left:auto;display:flex;gap:8px;align-items:center}
    .chip{background:var(--card);padding:8px 12px;border-radius:999px;font-size:12px;color:var(--muted);display:flex;align-items:center;gap:8px;box-shadow:var(--shadow)}
    .chip svg{width:16px;height:16px}

    #map{position:fixed;inset:0;z-index:1}
    #map.unavailable{display:grid;place-items:center;padding:40px;text-align:center}

    .dock{position:fixed;inset:auto 0 10px 0;display:flex;justify-content:center;z-index:40}
    .dock-inner{display:flex;gap:10px;padding:8px;background:rgba(23,26,46,.75);backdrop-filter:blur(10px);border-radius:20px;box-shadow:var(--shadow)}
    :root[data-theme="light"] .dock-inner{background:rgba(255,255,255,.8)}

    .btn{appearance:none;border:0;outline:0;padding:14px 16px;min-width:62px;border-radius:16px;background:var(--card);color:var(--text);font-weight:700;font-size:14px;display:flex;align-items:center;justify-content:center;gap:8px;box-shadow:var(--shadow);cursor:pointer;transition:.15s transform ease,.15s background}
    .btn:active{transform:translateY(1px)}
    .btn svg{width:20px;height:20px}
    .btn.primary{background:linear-gradient(135deg,var(--accent),var(--accent-2))}
    .btn.good{background:linear-gradient(135deg,#66d49a,#9cf3c0);color:#0f2b1f}
    .btn.warn{background:linear-gradient(135deg,#ffd36e,#ffe7a8);color:#3a2b00}
    .btn.danger{background:linear-gradient(135deg,#ff7b8a,#ffc0c7)}

    .sheet{position:fixed;left:0;right:0;bottom:0;z-index:35;background:var(--bg-soft);border-top-left-radius:20px;border-top-right-radius:20px;box-shadow:var(--shadow);transform:translateY(65%);transition:.25s transform ease}
    .sheet.open{transform:translateY(0)}
    .sheet-handle{width:52px;height:5px;border-radius:999px;background:#3b3f6b;margin:8px auto}
    :root[data-theme="light"] .sheet-handle{background:#e4e7ff}
    .sheet header{padding:4px 16px 8px;display:flex;align-items:center;gap:10px}
    .sheet header h3{margin:0;font-size:16px}
    .sheet .content{padding:0 16px 16px}

    .grid{display:grid;grid-template-columns:repeat(2,1fr);gap:10px}
    .card{background:var(--card);border-radius:var(--radius);padding:var(--pad);box-shadow:var(--shadow)}
    .card h4{margin:0 0 8px;font-size:14px;color:var(--muted)}

    .list{display:flex;flex-direction:column;gap:8px}
    .list .row{display:flex;align-items:center;gap:10px;padding:10px;background:#1c203c;border-radius:14px}
    :root[data-theme="light"] .list .row{background:#eef0ff}
    .row .pill{margin-left:auto;font-size:12px;background:#2c315a;padding:6px 10px;border-radius:999px;color:var(--muted)}
    :root[data-theme="light"] .row .pill{background:#dde2ff}

    .toasts{position:fixed;right:12px;bottom:96px;display:flex;flex-direction:column;gap:10px;z-index:50}
    .toast{background:#1e2240;border-left:6px solid var(--accent-2);padding:12px 14px;border-radius:12px;box-shadow:var(--shadow)}
    :root[data-theme="light"] .toast{background:#fff}

    #confetti{position:fixed;inset:0;pointer-events:none;z-index:51}

    dialog{border:0;border-radius:20px;background:var(--bg-soft);color:var(--text);width:min(540px,92vw);box-shadow:var(--shadow)}
    dialog::backdrop{background:rgba(0,0,0,.5)}
    .modal-header{display:flex;align-items:center;gap:10px;padding:12px 16px;border-bottom:1px solid #2a2f57}
    :root[data-theme="light"] .modal-header{border-bottom-color:#e6e9ff}
    .modal-body{padding:16px}
    .badge-grid{display:grid;grid-template-columns:repeat(3,1fr);gap:10px}
    .badge{background:#1c203c;border-radius:16px;padding:12px;text-align:center}
    :root[data-theme="light"] .badge{background:#eef0ff}
    .badge .icon{width:48px;height:48px;margin:6px auto}
    .badge.locked{opacity:.55;filter:grayscale(1)}

    @media (min-width:760px){.dock-inner{gap:12px}.btn{min-width:80px}}
  </style>
</head>
<body>
  <div class="topbar">
    <div class="brand">
      <div class="logo" aria-hidden="true">üè∑Ô∏è</div>
      <div>Fare<b>Guard</b></div>
    </div>
    <div class="top-actions">
      <div class="chip" id="streakChip" title="Patrol streak"><svg viewBox="0 0 24 24"><path fill="currentColor" d="M12 2l2.39 4.84L20 8l-4 3.9.95 5.53L12 15.9 7.05 17.4 8 11.9 4 8l5.61-1.16L12 2z"/></svg><span id="streakText">Streak 0üî•</span></div>
      <button class="btn" id="settingsBtn" aria-label="Open settings">‚öôÔ∏è Settings</button>
      <button class="btn" id="badgesBtn" aria-label="Open badges and missions">üéñÔ∏è Badges</button>
    </div>
  </div>

  <div id="map" class="unavailable">
    <div>
      <h2>Google Map loading‚Ä¶</h2>
      <p>If the map doesn‚Äôt appear, add your API key in the script tag at the bottom of this file.</p>
    </div>
  </div>

  <div class="dock">
    <div class="dock-inner">
      <button class="btn good" id="startPatrolBtn">üü¢ Start</button>
      <button class="btn danger" id="endPatrolBtn" disabled>‚õî End</button>
      <button class="btn warn" id="logIncidentBtn">üö® Incident</button>
      <button class="btn" id="needHelpBtn">üÜò Help</button>
      <button class="btn primary" id="fineBtn">üí∏ Fined!</button>
    </div>
  </div>

  <section class="sheet" id="sheet">
    <div class="sheet-handle" id="toggleSheet" aria-label="Toggle panel" role="button" tabindex="0"></div>
    <header>
      <h3>Today‚Äôs Missions & Quests</h3>
    </header>
    <div class="content">
      <div class="grid">
        <div class="card">
          <h4>Daily Quests</h4>
          <div class="list" id="questList"></div>
        </div>
        <div class="card">
          <h4>Weekly Missions</h4>
          <div class="list" id="missionList"></div>
        </div>
      </div>
    </div>
  </section>

  <div class="toasts" id="toasts"></div>
  <canvas id="confetti"></canvas>

  <dialog id="badgesModal">
    <div class="modal-header">
      <strong>Badges & Progress</strong>
      <div class="chip" style="margin-left:auto">Fines: <b id="fineCount">0</b></div>
    </div>
    <div class="modal-body">
      <div class="badge-grid" id="badgeGrid"></div>
    </div>
    <form method="dialog" style="padding:0 16px 16px; display:flex; justify-content:flex-end">
      <button class="btn" value="close">Close</button>
    </form>
  </dialog>

  <dialog id="settingsModal">
    <div class="modal-header">
      <strong>Settings</strong>
    </div>
    <div class="modal-body">
      <div class="list">
        <div class="row" style="justify-content:space-between; align-items:center">
          <div>Theme</div>
          <div class="pill" style="display:flex; gap:8px; background:transparent">
            <label><input type="radio" name="theme" value="system"> System</label>
            <label><input type="radio" name="theme" value="light"> Light</label>
            <label><input type="radio" name="theme" value="dark"> Dark</label>
          </div>
        </div>
        <div class="row"><label><input type="checkbox" id="optLargeText"> Larger text</label></div>
        <div class="row"><label><input type="checkbox" id="optReduceConfetti"> Reduce confetti</label></div>
        <div class="row"><label><input type="checkbox" id="optSound"> Sound effects</label></div>
        <div class="row"><label><input type="checkbox" id="optHaptics"> Vibrate on actions</label></div>
        <div class="row"><label><input type="checkbox" id="optAutoCenter"> Auto-center while patrolling</label></div>
        <div class="row"><label><input type="checkbox" id="optTraffic"> Show traffic</label></div>
        <div class="row"><label><input type="checkbox" id="optTransit"> Show transit</label></div>
        <div class="row" style="justify-content:space-between; align-items:center">
          <div>Units</div>
          <div class="pill" style="display:flex; gap:8px; background:transparent">
            <label><input type="radio" name="units" value="km"> km</label>
            <label><input type="radio" name="units" value="mi"> mi</label>
          </div>
        </div>
      </div>
    </div>
    <form method="dialog" style="padding:0 16px 16px; display:flex; justify-content:flex-end">
      <button class="btn" value="close">Close</button>
    </form>
  </dialog>

  <script>
    // ---- State ----
    const state = {
      map:null, heatmap:null, patrolWatcherId:null, patrolPath:null, patrolStartedAt:null,
      fines:Number(localStorage.getItem('fg_fines')||0),
      streak:Number(localStorage.getItem('fg_streak')||0),
      lastFineDate: localStorage.getItem('fg_lastFineDate') || null,
      quests:[], missions:[], markers:[],
      settings: JSON.parse(localStorage.getItem('fg_settings')||'null') || {
        theme:'system', sound:true, haptics:true, reduceConfetti:false, autoCenter:true, traffic:false, transit:false, largeText:false, units:'km'
      },
    };

    const todayKey = ()=> new Date().toISOString().slice(0,10);

    function toast(msg){
      const box = document.getElementById('toasts');
      const el = document.createElement('div'); el.className='toast'; el.textContent=msg; box.appendChild(el);
      setTimeout(()=>{ el.style.opacity='0'; el.style.transform='translateY(10px)'; }, 2400);
      setTimeout(()=> el.remove(), 3000);
    }

    // Confetti
    const confetti = (()=>{
      const canvas = document.getElementById('confetti');
      const ctx = canvas.getContext('2d');
      let particles=[]; function resize(){ canvas.width=innerWidth; canvas.height=innerHeight };
      addEventListener('resize', resize); resize();
      function blast(x=innerWidth/2, y=innerHeight/2){
        particles.push(...Array.from({length:80},()=>({x,y,vx:(Math.random()-0.5)*6,vy:(Math.random()*-6)-2,g:0.18,s:2+Math.random()*3,a:1,r:Math.random()*Math.PI})));
      }
      function loop(){
        ctx.clearRect(0,0,canvas.width,canvas.height);
        for(const p of particles){ p.vy+=p.g; p.x+=p.vx; p.y+=p.vy; p.a-=0.01; p.r+=0.1; ctx.save(); ctx.globalAlpha=Math.max(p.a,0); ctx.translate(p.x,p.y); ctx.rotate(p.r); ctx.fillStyle=['#7e8ce0','#ffb4d3','#ffd36e','#7be0a6'][Math.floor(Math.random()*4)]; ctx.fillRect(-p.s/2,-p.s/2,p.s,p.s); ctx.restore(); }
        particles = particles.filter(p=>p.a>0 && p.y<innerHeight+40);
        requestAnimationFrame(loop);
      } loop();
      return { blast };
    })();

    // Badges
    const BADGES = [
      { id:'firstFine', name:'First Fine', icon:'üê£', rule: s=>s.fines>=1 },
      { id:'triplePlay', name:'3 in a Day', icon:'üéØ', rule: s=>s.fines>=3 && s.lastFineDate===todayKey() },
      { id:'hotspotHero', name:'Hotspot Hero', icon:'üî•', rule: s=>s.touchedHotspot },
      { id:'helpingPaws', name:'Team Helper', icon:'ü´∂', rule: s=>s.usedHelp },
      { id:'weeklyWarrior', name:'Weekly 10', icon:'üèÜ', rule: s=>s.weeklyTotal>=10 },
    ];

    function updateHeader(){
      const el = document.getElementById('fineCount'); if(el) el.textContent = state.fines;
      document.getElementById('streakText').textContent = 'Streak ' + state.streak + 'üî•';
    }
    function saveProgress(){
      localStorage.setItem('fg_fines', String(state.fines));
      localStorage.setItem('fg_streak', String(state.streak));
      if(state.lastFineDate) localStorage.setItem('fg_lastFineDate', state.lastFineDate);
    }

    function seedQuests(){
      const today = todayKey();
      const existing = JSON.parse(localStorage.getItem('fg_quests_'+today)||'null');
      if(existing){ state.quests = existing; } else {
        state.quests = [
          { id:'q1', text:'Log 1 incident', done:false, kind:'logIncident' },
          { id:'q2', text:'Toggle hotspots layer', done:false, kind:'hotspots' },
          { id:'q3', text:'Issue 1 fine', done:false, kind:'fine' },
        ];
        localStorage.setItem('fg_quests_'+today, JSON.stringify(state.quests));
      }
      const weekKey = new Date();
      const yearWeek = weekKey.getFullYear()+ '-W' + Math.ceil((((weekKey - new Date(weekKey.getFullYear(),0,1))/86400000) + weekKey.getDay()+1)/7);
      const existingM = JSON.parse(localStorage.getItem('fg_missions_'+yearWeek)||'null');
      if(existingM){ state.missions = existingM; } else {
        state.missions = [
          { id:'m1', text:'Walk 3 km on patrol', progress:0, goal:3, unit:'km', kind:'distance' },
          { id:'m2', text:'Assist teammates 2 times', progress:0, goal:2, unit:'x', kind:'help' },
          { id:'m3', text:'10 fines this week', progress:0, goal:10, unit:'x', kind:'fine' },
        ];
        localStorage.setItem('fg_missions_'+yearWeek, JSON.stringify(state.missions));
      }
    }

    function renderLists(){
      const qEl = document.getElementById('questList'); qEl.innerHTML='';
      state.quests.forEach(q=>{
        const row = document.createElement('div'); row.className='row';
        row.innerHTML = `<span>${q.done? '‚úÖ' : '‚ú®'} ${q.text}</span>${q.done? '<span class="pill">Done</span>':''}`;
        qEl.appendChild(row);
      });
      const mEl = document.getElementById('missionList'); mEl.innerHTML='';
      state.missions.forEach(m=>{
        let progress=m.progress, goal=m.goal, unit=m.unit;
        if(m.kind==='distance' && state.settings.units==='mi'){ progress=Math.round(progress*0.621371*100)/100; goal=Math.round(goal*0.621371*10)/10; unit='mi'; }
        const pct = Math.min(100, Math.round((m.progress/m.goal)*100));
        const row = document.createElement('div'); row.className='row';
        row.innerHTML = `<span>üéØ ${m.text}</span><span class="pill">${progress}/${goal} ${unit} (${pct}%)</span>`;
        mEl.appendChild(row);
      });
      renderBadges();
    }

    function completeQuest(kind){
      const today = todayKey();
      let changed=false; state.quests.forEach(q=>{ if(q.kind===kind && !q.done){ q.done=true; changed=true; }});
      if(changed){ localStorage.setItem('fg_quests_'+today, JSON.stringify(state.quests)); renderLists(); toast('‚ú® Daily quest complete!'); if(!state.settings.reduceConfetti) confetti.blast(innerWidth-80, innerHeight-140); }
    }
    function missionProgress(kind, delta){
      const weekKey = new Date(); const yearWeek = weekKey.getFullYear()+ '-W' + Math.ceil((((weekKey - new Date(weekKey.getFullYear(),0,1))/86400000) + weekKey.getDay()+1)/7);
      let changed=false; state.missions.forEach(m=>{ if(m.kind===kind){ m.progress=Math.max(0, Math.min(m.goal, m.progress+delta)); changed=true; }});
      if(changed){ localStorage.setItem('fg_missions_'+yearWeek, JSON.stringify(state.missions)); renderLists(); }
    }

    function renderBadges(){
      const grid = document.getElementById('badgeGrid'); grid.innerHTML='';
      const weeklyCatch = (state.missions.find(m=>m.kind==='fine')||{progress:0}).progress;
      const s = Object.assign({}, state, { weeklyTotal: weeklyCatch });
      BADGES.forEach(b=>{
        const unlocked = !!b.rule(s);
        const el = document.createElement('div'); el.className='badge' + (unlocked? '' : ' locked');
        el.innerHTML = `<div class="icon">${b.icon}</div><div style="font-weight:700">${b.name}</div>`; grid.appendChild(el);
      });
      updateHeader();
    }

    // Icons
    const Icons = {
      // üö® Incident (alert / report)
      incident:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g1" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#ff7b8a"/><stop offset="1" stop-color="#ffb4d3"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g1)"/>
            <path d="M32 12c10 0 18 8 18 18s-11 22-18 28c-7-6-18-18-18-28s8-18 18-18z" fill="url(#g1)" opacity=".6"/>
            <path d="M30 22h4v14h-4zM30 40h4v4h-4z" fill="#2b1020"/>
          </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },

      // üÜò Help (request backup)
      help:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g2" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#7e8ce0"/><stop offset="1" stop-color="#b9bdf6"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g2)"/>
            <path d="M32 12c10 0 18 8 18 18s-11 22-18 28c-7-6-18-18-18-28s8-18 18-18z" fill="url(#g2)" opacity=".6"/>
            <text x="32" y="38" text-anchor="middle" font-size="22" font-family="Arial" fill="#0f1222">?</text>
          </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },

      // üß≠ Patrol (HQ/position)
      patrol:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g3" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#7be0a6"/><stop offset="1" stop-color="#c8f6de"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g3)"/>
            <path d="M22 38l8-12 8 12" stroke="#0f2b1f" stroke-width="4" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
          </g>
        </svg>`), scaledSize:{width:32,height:32}, anchor:{x:16,y:28} },

      // üí∏ Fine issued
      fine:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g4" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#ffd36e"/><stop offset="1" stop-color="#ffe7a8"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g4)"/>
            <path d="M22 30h20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H22a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2z" fill="#3a2b00"/>
            <circle cx="28" cy="35" r="2.5" fill="#ffd36e"/>
            <circle cx="36" cy="37" r="2.5" fill="#ffd36e"/>
            <circle cx="22" cy="34" r="4" fill="#ffd36e"/>
          </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },

      // ü™ß Checkpoint / Blitz
      checkpoint:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g5" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#7e8ce0"/><stop offset="1" stop-color="#ffb4d3"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g5)"/>
            <path d="M26 22v20M26 22h12l-4 6 4 6H26" stroke="#0f1222" stroke-width="3" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
          </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },

      // ‚ö†Ô∏è Hazard (gate broken, spill, etc.)
      hazard:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g6" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#ff7b8a"/><stop offset="1" stop-color="#ffd36e"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g6)"/>
            <path d="M32 22l10 18H22l10-18z" fill="#0f1222"/>
            <rect x="30" y="28" width="4" height="7" fill="#ffd36e"/>
            <rect x="30" y="37" width="4" height="4" fill="#ffd36e"/>
          </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },

      // üé• Camera / CCTV
      camera:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g7" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#7be0a6"/><stop offset="1" stop-color="#7e8ce0"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g7)"/>
            <rect x="22" y="28" width="20" height="12" rx="3" fill="#0f1222"/>
            <circle cx="32" cy="34" r="4" fill="#7be0a6"/>
            <rect x="40" y="31" width="6" height="6" fill="#0f1222"/>
          </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },

      // üë• Crowd / Congestion
      crowd:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g8" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#ffb4d3"/><stop offset="1" stop-color="#7e8ce0"/></linearGradient></defs>
        <g>
          <circle cx="32" cy="32" r="16" fill="url(#g8)"/>
          <circle cx="28" cy="34" r="4" fill="#0f1222"/>
          <circle cx="36" cy="34" r="4" fill="#0f1222"/>
          <rect x="24" y="38" width="16" height="6" rx="3" fill="#0f1222"/>
        </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },

      // üè† Base / Depot / Station office
      base:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g9" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#7e8ce0"/><stop offset="1" stop-color="#7be0a6"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g9)"/>
            <path d="M22 34l10-8 10 8v8H22z" fill="#0f1222"/>
            <rect x="30" y="36" width="4" height="6" fill="#7be0a6"/>
          </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },

      // ‚ÑπÔ∏è Info / Note
      info:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g10" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#b9bdf6"/><stop offset="1" stop-color="#7e8ce0"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g10)"/>
            <circle cx="32" cy="24" r="2.5" fill="#0f1222"/>
            <rect x="30" y="28" width="4" height="12" rx="1" fill="#0f1222"/>
          </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },

      // üî• Hotspot marker (manual pin)
      hotspot:{ url:'data:image/svg+xml;utf8,'+encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
          <defs><linearGradient id="g11" x1="0" x2="1" y1="0" y2="1"><stop stop-color="#ff7b8a"/><stop offset="1" stop-color="#ffd36e"/></linearGradient></defs>
          <g>
            <circle cx="32" cy="32" r="16" fill="url(#g11)"/>
            <path d="M32 20c5 5 2 8 0 10-1.8 1.8-2 3.2-2 4.5 0 3 2 5.5 4 5.5s4-2.5 4-5.5c0-2.5-1.2-4.3-3-6.5-1-1.3-2.2-2.7-3-4z" fill="#2b1020"/>
          </g>
        </svg>`), scaledSize:{width:40,height:40}, anchor:{x:20,y:36} },
    };

    // Settings
    function saveSettings(){ localStorage.setItem('fg_settings', JSON.stringify(state.settings)); }
    let _sysThemeMql = null;
    function applyTheme(){
      const root = document.documentElement; let mode = state.settings.theme;
      if(mode==='system'){
        if(!_sysThemeMql){ _sysThemeMql = window.matchMedia('(prefers-color-scheme: dark)'); _sysThemeMql.onchange = applyTheme; }
        root.setAttribute('data-theme', _sysThemeMql.matches ? 'dark' : 'light');
      } else { root.setAttribute('data-theme', mode); }
    }
    function applySettings(){
      applyTheme();
      document.body.classList.toggle('large', !!state.settings.largeText);
      if(state.map){
        if(state.trafficLayer) state.trafficLayer.setMap(state.settings.traffic ? state.map : null);
        if(state.transitLayer) state.transitLayer.setMap(state.settings.transit ? state.map : null);
      }
    }
    function openSettings(){
      const modal = document.getElementById('settingsModal');
      // hydrate inputs
      modal.querySelectorAll('input[name="theme"]').forEach(i=> i.checked = (i.value===state.settings.theme));
      modal.querySelector('#optLargeText').checked = !!state.settings.largeText;
      modal.querySelector('#optReduceConfetti').checked = !!state.settings.reduceConfetti;
      modal.querySelector('#optSound').checked = !!state.settings.sound;
      modal.querySelector('#optHaptics').checked = !!state.settings.haptics;
      modal.querySelector('#optAutoCenter').checked = !!state.settings.autoCenter;
      modal.querySelector('#optTraffic').checked = !!state.settings.traffic;
      modal.querySelector('#optTransit').checked = !!state.settings.transit;
      modal.querySelectorAll('input[name="units"]').forEach(i=> i.checked = (i.value===state.settings.units));

      if(!modal.dataset.wired){
        modal.dataset.wired='1';
        modal.addEventListener('change', (e)=>{
          const t = e.target;
          if(t.name==='theme') state.settings.theme = t.value;
          if(t.id==='optLargeText') state.settings.largeText = t.checked;
          if(t.id==='optReduceConfetti') state.settings.reduceConfetti = t.checked;
          if(t.id==='optSound') state.settings.sound = t.checked;
          if(t.id==='optHaptics') state.settings.haptics = t.checked;
          if(t.id==='optAutoCenter') state.settings.autoCenter = t.checked;
          if(t.id==='optTraffic') state.settings.traffic = t.checked;
          if(t.id==='optTransit') state.settings.transit = t.checked;
          if(t.name==='units') state.settings.units = t.value;
          saveSettings(); applySettings(); renderLists();
        });
      }
      modal.showModal();
    }
    function beep(){ try{ if(!state.settings.sound) return; const ctx = new (window.AudioContext||window.webkitAudioContext)(); const o=ctx.createOscillator(); const g=ctx.createGain(); o.type='triangle'; o.frequency.value=880; o.connect(g); g.connect(ctx.destination); g.gain.setValueAtTime(0.0001, ctx.currentTime); g.gain.exponentialRampToValueAtTime(0.05, ctx.currentTime+0.01); o.start(); o.stop(ctx.currentTime+0.08);}catch{} }
    function haptic(){ if(state.settings.haptics && navigator.vibrate){ navigator.vibrate(15); } }

    // Map
    function initMap(){
      if(!window.google || !google.maps){ return; }
      const center = { lat: -37.8183, lng: 144.9671 };
      const map = new google.maps.Map(document.getElementById('map'), { center, zoom:14, mapId:'DEMO_MAP_ID', disableDefaultUI:true });
      state.map = map;
      state.patrolPath = new google.maps.Polyline({ map, path: [], geodesic:true, strokeColor:'#66d49a', strokeOpacity:.9, strokeWeight:5 });
      if(google.maps.visualization){
        const heatData = [ new google.maps.LatLng(-37.8183,144.9671), new google.maps.LatLng(-37.8150,144.9660), new google.maps.LatLng(-37.8205,144.9710), new google.maps.LatLng(-37.8170,144.9700), new google.maps.LatLng(-37.8192,144.9640) ];
        state.heatmap = new google.maps.visualization.HeatmapLayer({ data: heatData, radius: 30, dissipating: true });
      }
      state.trafficLayer = new google.maps.TrafficLayer();
      state.transitLayer = new google.maps.TransitLayer();
      applySettings();
      new google.maps.Marker({ position:center, map, icon:Icons.patrol, title:'Patrol HQ' });
      document.getElementById('map').classList.remove('unavailable');
    }

    function toggleHotspots(){
      if(!state.map || !state.heatmap){ toast('Heatmap not ready.'); return; }
      const visible = state.heatmap.getMap();
      state.heatmap.setMap(visible ? null : state.map);
      state.touchedHotspot = true; completeQuest('hotspots');
      beep(); haptic(); toast(visible? 'Hotspots hidden' : 'Hotspots shown');
    }

    function placeMarker(latLng, type){ if(!state.map) return; const icon = Icons[type] || Icons.incident; new google.maps.Marker({ position:latLng, map:state.map, icon, title:type }); }

    function startPatrol(){
      if(state.patrolWatcherId){ toast('Patrol already running'); return; }
      if(!navigator.geolocation){ toast('Geolocation not supported'); return; }
      state.patrolStartedAt = Date.now();
      document.getElementById('startPatrolBtn').disabled = true;
      document.getElementById('endPatrolBtn').disabled = false;
      beep(); haptic(); toast('Patrol started üêæ');
      state.patrolWatcherId = navigator.geolocation.watchPosition((pos)=>{
        const lat = pos.coords.latitude, lng = pos.coords.longitude;
        const point = new google.maps.LatLng(lat, lng);
        if(state.map && state.settings.autoCenter){ state.map.panTo(point); }
        if(state.patrolPath){ state.patrolPath.getPath().push(point); }
      }, ()=>{ toast('Location permission denied'); }, { enableHighAccuracy:true, maximumAge:5000, timeout:10000 });
    }

    function endPatrol(){
      if(state.patrolWatcherId){ navigator.geolocation.clearWatch(state.patrolWatcherId); state.patrolWatcherId=null; }
      document.getElementById('startPatrolBtn').disabled = false;
      document.getElementById('endPatrolBtn').disabled = true;
      beep(); haptic(); toast('Patrol ended. Nice work!');
      const meters = computePolylineDistanceMeters(state.patrolPath ? state.patrolPath.getPath() : null);
      if(meters>0){ missionProgress('distance', meters/1000); }
    }

    function computePolylineDistanceMeters(path){ try{ if(!path || path.getLength()<2) return 0; let d=0; for(let i=1;i<path.getLength();i++){ const p1=path.getAt(i-1), p2=path.getAt(i); d+=haversine(p1.lat(),p1.lng(),p2.lat(),p2.lng()); } return d; }catch{return 0;} }
    function haversine(lat1,lon1,lat2,lon2){ const R=6371000,toRad=x=>x*Math.PI/180; const dLat=toRad(lat2-lat1), dLon=toRad(lon2-lon1); const a=Math.sin(dLat/2)**2 + Math.cos(toRad(lat1))*Math.cos(toRad(lat2))*Math.sin(dLon/2)**2; return 2*R*Math.asin(Math.sqrt(a)); }

    function logIncident(){ if(!state.map){ toast('Map not ready'); return; } const c=state.map.getCenter(); placeMarker(c,'incident'); completeQuest('logIncident'); beep(); haptic(); toast('Incident logged üö®'); }
    function needHelp(){ if(!state.map){ toast('Map not ready'); return; } const c=state.map.getCenter(); placeMarker(c,'help'); state.usedHelp=true; missionProgress('help',1); beep(); haptic(); toast('Help requested üÜò'); }

    function registerFine(){
      const today = todayKey();
      state.fines += 1; state.lastFineDate = today;
      const lastDate = localStorage.getItem('fg_lastFineDate');
      if(lastDate === today){ /* keep streak */ }
      else if(lastDate){
        const y=new Date(); y.setDate(y.getDate()-1); const yKey=y.toISOString().slice(0,10);
        state.streak = (lastDate===yKey) ? state.streak+1 : 1;
      } else { state.streak=1; }
      localStorage.setItem('fg_lastFineDate', today);
      saveProgress(); updateHeader(); missionProgress('fine',1); completeQuest('fine');
      beep(); haptic(); toast('Fare evader fined üí∏üéâ'); if(!state.settings.reduceConfetti) confetti.blast(innerWidth/2, innerHeight*0.35);
    }

    function wireUI(){
      document.getElementById('startPatrolBtn').addEventListener('click', startPatrol);
      document.getElementById('endPatrolBtn').addEventListener('click', endPatrol);
      document.getElementById('logIncidentBtn').addEventListener('click', logIncident);
      document.getElementById('needHelpBtn').addEventListener('click', needHelp);
      document.getElementById('fineBtn').addEventListener('click', registerFine);
      document.getElementById('badgesBtn').addEventListener('click', ()=> document.getElementById('badgesModal').showModal());
      document.getElementById('settingsBtn').addEventListener('click', openSettings);
      const sheet = document.getElementById('sheet'); const handle = document.getElementById('toggleSheet');
      function toggle(){ sheet.classList.toggle('open'); }
      handle.addEventListener('click', toggle); handle.addEventListener('keydown', (e)=>{ if(e.key==='Enter' || e.key===' '){ toggle(); }});
      // Long-press on Fined toggles hotspots
      let timer=null; const fineBtn=document.getElementById('fineBtn');
      fineBtn.addEventListener('mousedown', ()=>{ timer=setTimeout(toggleHotspots,700); });
      ['mouseup','mouseleave','touchend','touchcancel'].forEach(ev=> fineBtn.addEventListener(ev, ()=>{ clearTimeout(timer); }));
    }

    function boot(){
      seedQuests(); renderLists(); updateHeader(); wireUI(); applySettings();
      if(window.google && google.maps) initMap();
    }
    document.addEventListener('DOMContentLoaded', boot);
    window.__fareguardInit = initMap;
  </script>

  <script async defer src="https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&libraries=visualization&callback=__fareguardInit"></script>
</body>
</html>

